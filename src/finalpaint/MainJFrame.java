/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalpaint;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import sm.ata.graphics.Canvass2D;
import static sm.ata.shapes.GAttribute.FILL_OFF;
import static sm.ata.shapes.GAttribute.FILL_ON;
import sm.ata.ui.ImageCanvass2D;
import sm.image.LookupTableProducer;

/**
 *
 * @author Darth-ATA
 */
public class MainJFrame extends javax.swing.JFrame {
    public static final int C_BRIGHTNESS = 0;
    public static final int C_ROTATION = 1;
    public static final int C_BINARY = 2;
    public static final int C_BINARY_TEMP = 3;  //It is needed to fix an error
    
    private boolean changingBrightness = false;
    private boolean changingRotation = false;
    private boolean changingBinary = false;
    
    private BufferedImage imgLeft = null;
    private BufferedImage imgRight = null;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }
    
    /**
     * This method change the text in the text status
     * @param message text to change the text status
     */
    private void changeTextStatus(String message){
        BarStatus.setText(" Tool: " + message + " .");
    }
    
    /**
     * This method take the information in the canvass and change the status
     * in the differents buttons according to the obtained information
     */
    public void updateEverything(){
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            Canvass2D currentCanvass = currentWindow.getCanvass2D();

            // Color button
            if (currentCanvass.getColor() == Color.BLACK)
                this.ComboBoxColor.setSelectedItem("Black");
            else if (currentCanvass.getColor() == Color.RED)
                this.ComboBoxColor.setSelectedItem("Red ");
            else if (currentCanvass.getColor() == Color.BLUE)
                this.ComboBoxColor.setSelectedItem("Blue ");
            else if (currentCanvass.getColor() == Color.WHITE)
                this.ComboBoxColor.setSelectedItem("White ");
            else if (currentCanvass.getColor() == Color.YELLOW)
                 this.ComboBoxColor.setSelectedItem("Yellow");
            else
                this.ComboBoxColor.setSelectedItem("Green ");

            // Figure mode button
            switch (currentCanvass.getFigureMode()){
                case Canvass2D.M_POINTS:        this.ButtonPoint.setSelected(true);
                                                break;
                case Canvass2D.M_LINES:         this.ButtonLine.setSelected(true);
                                                break;
                case Canvass2D.M_RECTANGLES:    this.ButtonRectangle.setSelected(true);
                                                break;
                case Canvass2D.M_ELLIPSES:      this.ButtonEllipse.setSelected(true);
                                                break;
            }

            // Fill button
            if(currentWindow.getCanvass2D().getFillMode() == FILL_OFF)
                this.ButtonFill.setSelected(false);
            else
                this.ButtonFill.setSelected(true);
            // Thickness spinner
            this.SpinnerThick.setValue(currentWindow.getCanvass2D().getThick());
            // Smooth button
            this.ButtonSmooth.setSelected(currentWindow.getCanvass2D().isSmooth());
            // Transparency button
            //this.ButtonTransparency.setSelected(currentWindow.getCanvass2D().isTransparency());
            this.updatePanelExtra();                      
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonGroupForms = new javax.swing.ButtonGroup();
        ToolsAndWindow = new javax.swing.JPanel();
        ToolBar = new javax.swing.JPanel();
        ButtonNew = new javax.swing.JButton();
        ButtonOpen = new javax.swing.JButton();
        ButtonSave = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        Desktop = new javax.swing.JDesktopPane();
        BotPanel = new javax.swing.JPanel();
        ExtraPanel = new javax.swing.JPanel();
        PanelDraw = new javax.swing.JPanel();
        FormsBar = new javax.swing.JPanel();
        ButtonPoint = new javax.swing.JToggleButton();
        ButtonLine = new javax.swing.JToggleButton();
        ButtonRectangle = new javax.swing.JToggleButton();
        ButtonEllipse = new javax.swing.JToggleButton();
        ButtonArc = new javax.swing.JToggleButton();
        ButtonEdit = new javax.swing.JToggleButton();
        ShapesColorBar = new javax.swing.JPanel();
        ComboBoxColor = new javax.swing.JComboBox<>();
        ButtonFill = new javax.swing.JToggleButton();
        BorderBar = new javax.swing.JPanel();
        ThickColor = new javax.swing.JPanel();
        SpinnerThick = new javax.swing.JSpinner();
        ButtonColorBorder = new javax.swing.JButton();
        ComboBoxBorderType = new javax.swing.JComboBox<>();
        PanelFillColorType = new javax.swing.JPanel();
        ComboBoxFill = new javax.swing.JComboBox<>();
        PanelAntialiasingAndTransparency = new javax.swing.JPanel();
        ButtonSmooth = new javax.swing.JToggleButton();
        SliderBrightness1 = new javax.swing.JSlider();
        PanelImage = new javax.swing.JPanel();
        PanelBrightness = new javax.swing.JPanel();
        SliderBrightness = new javax.swing.JSlider();
        PanelFilter = new javax.swing.JPanel();
        ComboBoxFilter = new javax.swing.JComboBox<>();
        PanelContrast = new javax.swing.JPanel();
        ButtonNormalContrast = new javax.swing.JButton();
        ButtonIluminationContrast = new javax.swing.JButton();
        ButtonDarkerContrast = new javax.swing.JButton();
        PanelSin = new javax.swing.JPanel();
        ButtonSin = new javax.swing.JButton();
        ButtonSepia = new javax.swing.JButton();
        ButtonGradient = new javax.swing.JButton();
        PanelRotation = new javax.swing.JPanel();
        SliderRotation = new javax.swing.JSlider();
        Button90G = new javax.swing.JButton();
        Button180G = new javax.swing.JButton();
        Button270G = new javax.swing.JButton();
        PanelScala = new javax.swing.JPanel();
        ButtonAugmentate = new javax.swing.JButton();
        ButtonReduce = new javax.swing.JButton();
        PanelBinary = new javax.swing.JPanel();
        ButtonPlusBinary = new javax.swing.JButton();
        ButtonLessBinary = new javax.swing.JButton();
        SliderBinary = new javax.swing.JSlider();
        PanelThresholding = new javax.swing.JPanel();
        SliderThresholding = new javax.swing.JSlider();
        PanelStatus = new javax.swing.JPanel();
        BarStatus = new javax.swing.JTextField();
        PixelValue = new javax.swing.JTextField();
        MenuBar = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuItemNew = new javax.swing.JMenuItem();
        MenuItemOpen = new javax.swing.JMenuItem();
        MenuItemSave = new javax.swing.JMenuItem();
        MenuView = new javax.swing.JMenu();
        MenuItemStatusBar = new javax.swing.JCheckBoxMenuItem();
        MenuItemFormBar = new javax.swing.JCheckBoxMenuItem();
        MenuItemAttributeBar = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ToolsAndWindow.setLayout(new java.awt.BorderLayout());

        ToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        ButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/nuevo.png"))); // NOI18N
        ButtonNew.setToolTipText("New");
        ButtonNew.setPreferredSize(null);
        ButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNewActionPerformed(evt);
            }
        });
        ToolBar.add(ButtonNew);

        ButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/abrir.png"))); // NOI18N
        ButtonOpen.setToolTipText("Open");
        ButtonOpen.setPreferredSize(null);
        ButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOpenActionPerformed(evt);
            }
        });
        ToolBar.add(ButtonOpen);

        ButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/guardar.png"))); // NOI18N
        ButtonSave.setToolTipText("Save");
        ButtonSave.setPreferredSize(null);
        ButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSaveActionPerformed(evt);
            }
        });
        ToolBar.add(ButtonSave);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(5, 50));
        ToolBar.add(jSeparator1);

        ToolsAndWindow.add(ToolBar, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout DesktopLayout = new javax.swing.GroupLayout(Desktop);
        Desktop.setLayout(DesktopLayout);
        DesktopLayout.setHorizontalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1808, Short.MAX_VALUE)
        );
        DesktopLayout.setVerticalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 531, Short.MAX_VALUE)
        );

        ToolsAndWindow.add(Desktop, java.awt.BorderLayout.CENTER);

        getContentPane().add(ToolsAndWindow, java.awt.BorderLayout.CENTER);

        BotPanel.setPreferredSize(new java.awt.Dimension(130, 215));
        BotPanel.setLayout(new java.awt.BorderLayout());

        ExtraPanel.setMinimumSize(new java.awt.Dimension(1196, 50));
        ExtraPanel.setPreferredSize(new java.awt.Dimension(1165, 70));
        ExtraPanel.setLayout(new java.awt.BorderLayout());

        PanelDraw.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        FormsBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Shapes"));

        ButtonGroupForms.add(ButtonPoint);
        ButtonPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/punto.png"))); // NOI18N
        ButtonPoint.setToolTipText("Point");
        ButtonPoint.setPreferredSize(null);
        ButtonPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPointActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonPoint);

        ButtonGroupForms.add(ButtonLine);
        ButtonLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/linea.png"))); // NOI18N
        ButtonLine.setToolTipText("Line");
        ButtonLine.setPreferredSize(null);
        ButtonLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLineActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonLine);

        ButtonGroupForms.add(ButtonRectangle);
        ButtonRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/rectangulo.png"))); // NOI18N
        ButtonRectangle.setToolTipText("Rectangle");
        ButtonRectangle.setPreferredSize(null);
        ButtonRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRectangleActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonRectangle);

        ButtonGroupForms.add(ButtonEllipse);
        ButtonEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/elipse.png"))); // NOI18N
        ButtonEllipse.setToolTipText("Ellipse");
        ButtonEllipse.setPreferredSize(null);
        ButtonEllipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEllipseActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonEllipse);

        ButtonGroupForms.add(ButtonArc);
        ButtonArc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/linea.png"))); // NOI18N
        ButtonArc.setToolTipText("Point");
        ButtonArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonArcActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonArc);

        ButtonGroupForms.add(ButtonEdit);
        ButtonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/seleccion.png"))); // NOI18N
        ButtonEdit.setToolTipText("Edit");
        ButtonEdit.setPreferredSize(null);
        ButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditActionPerformed(evt);
            }
        });
        FormsBar.add(ButtonEdit);

        PanelDraw.add(FormsBar);

        ShapesColorBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Shapes Color"));

        ComboBoxColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "White ", "Red ", "Blue ", "Green ", "Yellow" }));
        ComboBoxColor.setToolTipText("Color");
        ComboBoxColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxColorActionPerformed(evt);
            }
        });
        ShapesColorBar.add(ComboBoxColor);

        ButtonFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/rellenar.png"))); // NOI18N
        ButtonFill.setToolTipText("Fill");
        ButtonFill.setPreferredSize(null);
        ButtonFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonFillActionPerformed(evt);
            }
        });
        ShapesColorBar.add(ButtonFill);

        PanelDraw.add(ShapesColorBar);

        BorderBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Border"));
        BorderBar.setLayout(new java.awt.BorderLayout());

        SpinnerThick.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        SpinnerThick.setToolTipText("Width");
        SpinnerThick.setName(""); // NOI18N
        SpinnerThick.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SpinnerThickStateChanged(evt);
            }
        });
        ThickColor.add(SpinnerThick);

        ButtonColorBorder.setBackground(new java.awt.Color(0, 0, 0));
        ButtonColorBorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonColorBorderActionPerformed(evt);
            }
        });
        ThickColor.add(ButtonColorBorder);

        BorderBar.add(ThickColor, java.awt.BorderLayout.PAGE_END);

        ComboBoxBorderType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BorderBar.add(ComboBoxBorderType, java.awt.BorderLayout.CENTER);

        PanelDraw.add(BorderBar);

        PanelFillColorType.setBorder(javax.swing.BorderFactory.createTitledBorder("Fill"));

        ComboBoxFill.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PanelFillColorType.add(ComboBoxFill);

        PanelDraw.add(PanelFillColorType);

        PanelAntialiasingAndTransparency.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Smooth and transparency"));
        PanelAntialiasingAndTransparency.setPreferredSize(new java.awt.Dimension(270, 70));

        ButtonSmooth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/alisar.png"))); // NOI18N
        ButtonSmooth.setToolTipText("Smooth");
        ButtonSmooth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSmoothActionPerformed(evt);
            }
        });
        PanelAntialiasingAndTransparency.add(ButtonSmooth);

        SliderBrightness1.setMaximum(255);
        SliderBrightness1.setMinimum(-255);
        SliderBrightness1.setValue(255);
        SliderBrightness1.setPreferredSize(new java.awt.Dimension(160, 26));
        SliderBrightness1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderBrightness1StateChanged(evt);
            }
        });
        PanelAntialiasingAndTransparency.add(SliderBrightness1);

        PanelDraw.add(PanelAntialiasingAndTransparency);

        ExtraPanel.add(PanelDraw, java.awt.BorderLayout.PAGE_START);

        PanelImage.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        PanelBrightness.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Brightness"));
        PanelBrightness.setPreferredSize(new java.awt.Dimension(180, 70));

        SliderBrightness.setMaximum(255);
        SliderBrightness.setMinimum(-255);
        SliderBrightness.setValue(0);
        SliderBrightness.setPreferredSize(new java.awt.Dimension(160, 26));
        SliderBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderBrightnessStateChanged(evt);
            }
        });
        PanelBrightness.add(SliderBrightness);

        PanelImage.add(PanelBrightness);

        PanelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filter"));
        PanelFilter.setToolTipText("");
        PanelFilter.setPreferredSize(new java.awt.Dimension(150, 70));

        ComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Focus", "Relief", "Laplacian" }));
        ComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxFilterActionPerformed(evt);
            }
        });
        PanelFilter.add(ComboBoxFilter);

        PanelImage.add(PanelFilter);

        PanelContrast.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Contrast"));
        PanelContrast.setPreferredSize(new java.awt.Dimension(230, 70));

        ButtonNormalContrast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/contraste.png"))); // NOI18N
        ButtonNormalContrast.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonNormalContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNormalContrastActionPerformed(evt);
            }
        });
        PanelContrast.add(ButtonNormalContrast);

        ButtonIluminationContrast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/iluminar.png"))); // NOI18N
        ButtonIluminationContrast.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonIluminationContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonIluminationContrastActionPerformed(evt);
            }
        });
        PanelContrast.add(ButtonIluminationContrast);

        ButtonDarkerContrast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/oscurecer.png"))); // NOI18N
        ButtonDarkerContrast.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonDarkerContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDarkerContrastActionPerformed(evt);
            }
        });
        PanelContrast.add(ButtonDarkerContrast);

        PanelImage.add(PanelContrast);

        PanelSin.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " "));
        PanelSin.setPreferredSize(new java.awt.Dimension(230, 70));
        PanelSin.setRequestFocusEnabled(false);

        ButtonSin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/sinusoidal.png"))); // NOI18N
        ButtonSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSinActionPerformed(evt);
            }
        });
        PanelSin.add(ButtonSin);

        ButtonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/sepia.png"))); // NOI18N
        ButtonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSepiaActionPerformed(evt);
            }
        });
        PanelSin.add(ButtonSepia);

        ButtonGradient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/gradiente.png"))); // NOI18N
        ButtonGradient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGradientActionPerformed(evt);
            }
        });
        PanelSin.add(ButtonGradient);

        PanelImage.add(PanelSin);

        PanelRotation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Rotation"));
        PanelRotation.setPreferredSize(new java.awt.Dimension(330, 70));

        SliderRotation.setMajorTickSpacing(90);
        SliderRotation.setMaximum(360);
        SliderRotation.setPaintTicks(true);
        SliderRotation.setValue(0);
        SliderRotation.setPreferredSize(new java.awt.Dimension(100, 26));
        SliderRotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderRotationStateChanged(evt);
            }
        });
        PanelRotation.add(SliderRotation);

        Button90G.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/rotacion90.png"))); // NOI18N
        Button90G.setPreferredSize(new java.awt.Dimension(65, 33));
        Button90G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button90GActionPerformed(evt);
            }
        });
        PanelRotation.add(Button90G);

        Button180G.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/rotacion180.png"))); // NOI18N
        Button180G.setPreferredSize(new java.awt.Dimension(65, 33));
        Button180G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button180GActionPerformed(evt);
            }
        });
        PanelRotation.add(Button180G);

        Button270G.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/rotacion270.png"))); // NOI18N
        Button270G.setPreferredSize(new java.awt.Dimension(65, 33));
        Button270G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button270GActionPerformed(evt);
            }
        });
        PanelRotation.add(Button270G);

        PanelImage.add(PanelRotation);

        PanelScala.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scala"));
        PanelScala.setPreferredSize(new java.awt.Dimension(180, 70));

        ButtonAugmentate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/aumentar.png"))); // NOI18N
        ButtonAugmentate.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonAugmentate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAugmentateActionPerformed(evt);
            }
        });
        PanelScala.add(ButtonAugmentate);

        ButtonReduce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/disminuir.png"))); // NOI18N
        ButtonReduce.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonReduce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonReduceActionPerformed(evt);
            }
        });
        PanelScala.add(ButtonReduce);

        PanelImage.add(PanelScala);

        PanelBinary.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Binary"));
        PanelBinary.setPreferredSize(new java.awt.Dimension(270, 70));

        ButtonPlusBinary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/suma.png"))); // NOI18N
        ButtonPlusBinary.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonPlusBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlusBinaryActionPerformed(evt);
            }
        });
        PanelBinary.add(ButtonPlusBinary);

        ButtonLessBinary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/resta.png"))); // NOI18N
        ButtonLessBinary.setPreferredSize(new java.awt.Dimension(65, 33));
        ButtonLessBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLessBinaryActionPerformed(evt);
            }
        });
        PanelBinary.add(ButtonLessBinary);

        SliderBinary.setPaintTicks(true);
        SliderBinary.setPreferredSize(new java.awt.Dimension(100, 26));
        SliderBinary.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderBinaryStateChanged(evt);
            }
        });
        PanelBinary.add(SliderBinary);

        PanelImage.add(PanelBinary);

        PanelThresholding.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Thresholding"));
        PanelThresholding.setPreferredSize(new java.awt.Dimension(180, 70));

        SliderThresholding.setMaximum(255);
        SliderThresholding.setMinimum(-255);
        SliderThresholding.setValue(0);
        SliderThresholding.setPreferredSize(new java.awt.Dimension(160, 26));
        SliderThresholding.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderThresholdingStateChanged(evt);
            }
        });
        PanelThresholding.add(SliderThresholding);

        PanelImage.add(PanelThresholding);

        ExtraPanel.add(PanelImage, java.awt.BorderLayout.CENTER);

        BotPanel.add(ExtraPanel, java.awt.BorderLayout.CENTER);

        PanelStatus.setMinimumSize(new java.awt.Dimension(67, 25));
        PanelStatus.setPreferredSize(new java.awt.Dimension(1808, 30));
        PanelStatus.setLayout(new java.awt.BorderLayout(0, 3));

        BarStatus.setEditable(false);
        BarStatus.setBorder(null);
        BarStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        BarStatus.setEnabled(false);
        BarStatus.setPreferredSize(new java.awt.Dimension(140, 16));
        PanelStatus.add(BarStatus, java.awt.BorderLayout.LINE_START);

        PixelValue.setEditable(false);
        PixelValue.setBorder(null);
        PixelValue.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        PixelValue.setEnabled(false);
        PixelValue.setPreferredSize(new java.awt.Dimension(200, 16));
        PanelStatus.add(PixelValue, java.awt.BorderLayout.EAST);

        BotPanel.add(PanelStatus, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(BotPanel, java.awt.BorderLayout.PAGE_END);

        MenuFile.setText("File");

        MenuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/nuevo.png"))); // NOI18N
        MenuItemNew.setText("New");
        MenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemNewActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemNew);

        MenuItemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/abrir.png"))); // NOI18N
        MenuItemOpen.setText("Open");
        MenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemOpen);

        MenuItemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalpaint/icons/guardar.png"))); // NOI18N
        MenuItemSave.setText("Save");
        MenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemSave);

        MenuBar.add(MenuFile);

        MenuView.setText("View");

        MenuItemStatusBar.setSelected(true);
        MenuItemStatusBar.setText("Status bar");
        MenuItemStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemStatusBarActionPerformed(evt);
            }
        });
        MenuView.add(MenuItemStatusBar);

        MenuItemFormBar.setSelected(true);
        MenuItemFormBar.setText("Forms bar");
        MenuItemFormBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFormBarActionPerformed(evt);
            }
        });
        MenuView.add(MenuItemFormBar);

        MenuItemAttributeBar.setSelected(true);
        MenuItemAttributeBar.setText("Attributes bar");
        MenuItemAttributeBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAttributeBarActionPerformed(evt);
            }
        });
        MenuView.add(MenuItemAttributeBar);

        MenuBar.add(MenuView);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method take the event of action performed and change de canvass
     * according to the button
     * @param evt action event
     */
    private void ButtonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPointActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().setFigureMode(Canvass2D.M_POINTS);
        changeTextStatus("Point");
    }//GEN-LAST:event_ButtonPointActionPerformed
    
    /**
     * This method take the event of action performed and change de canvass
     * according to the button
     * @param evt action event
     */
    private void ButtonLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLineActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().setFigureMode(Canvass2D.M_LINES);
        changeTextStatus("Line");
    }//GEN-LAST:event_ButtonLineActionPerformed
    
    /**
     * This method take the event of action performed and change de canvass
     * according to the button
     * @param evt action event
     */
    private void ButtonRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRectangleActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().setFigureMode(Canvass2D.M_RECTANGLES);
        changeTextStatus("Rectangle");
    }//GEN-LAST:event_ButtonRectangleActionPerformed
    
    /**
     * This method take the event of action performed and change de canvass
     * according to the button
     * @param evt action event
     */
    private void ButtonEllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEllipseActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().setFigureMode(Canvass2D.M_ELLIPSES);
        changeTextStatus("Ellipse");
    }//GEN-LAST:event_ButtonEllipseActionPerformed
    
    /**
     * This method take the event of action performed and creates a new internal
     * window
     * @param evt action event
     */
    private void ButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNewActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> options = WindowDimension.showWindowDimension();
        if(options != null){
            InternalWindow currentWindow = new InternalWindow(this);
            currentWindow.setTitle("New");
            currentWindow.setSize(options.get(0)+100, options.get(1)+100);
            Desktop.add(currentWindow);
            currentWindow.setVisible(true);
            
            BufferedImage img;
            img = new BufferedImage(options.get(0), options.get(1), BufferedImage.TYPE_INT_RGB);
            Graphics g = img.getGraphics();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, options.get(0), options.get(1));
            currentWindow.getCanvass2D().setImg(img);
        }
    }//GEN-LAST:event_ButtonNewActionPerformed

    private void ButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if ( resp == JFileChooser.APPROVE_OPTION) {
            try {
                //TODO CODE
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                InternalWindow currentWindow = new InternalWindow(this);
                currentWindow.getCanvass2D().setImg(img);
                currentWindow.getCanvass2D().setOriginalImg(img);
                this.Desktop.add(currentWindow);
                currentWindow.setTitle(f.getName());
                currentWindow.setVisible(true);
            } catch (IOException ex) {
                System.err.println("Error reading the image");
            }
        }
    }//GEN-LAST:event_ButtonOpenActionPerformed

    private void ButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSaveActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow=(InternalWindow) Desktop.getSelectedFrame();   
        if (currentWindow != null) {     
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {     
                try {       
                    BufferedImage img = currentWindow.getCanvass2D().getImg(true);       
                    if (img != null) {         
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);         
                        currentWindow.setTitle(f.getName());       
                    }
                }catch (Exception ex) {       
                    System.err.println("Error saving the image");     
                }   
            }
        }           
    }//GEN-LAST:event_ButtonSaveActionPerformed
    
    /**
     * This method take the event of action performed and change the visibility
     * of it
     * @param evt action event
     */
    private void MenuItemStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemStatusBarActionPerformed
        // TODO add your handling code here:
        if (this.BarStatus.isVisible())
            this.BarStatus.setVisible(false);
        else
            this.BarStatus.setVisible(true);
    }//GEN-LAST:event_MenuItemStatusBarActionPerformed
    
   
   
    /**
     * This method take the event of action performed and change the edit
     * in the canvass
     * @param evt action event
     */
    private void ButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().changeEditMode();
    }//GEN-LAST:event_ButtonEditActionPerformed

    /**
     * This method take the event of action performed and change the draw in the
     * canvass
     * @param evt action event
     */
    private void ButtonFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFillActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            if (currentWindow.getCanvass2D().getFillMode() == FILL_OFF)
                currentWindow.getCanvass2D().setFillMode(FILL_ON); 
            else
                currentWindow.getCanvass2D().setFillMode(FILL_OFF);
        }
    }//GEN-LAST:event_ButtonFillActionPerformed

    /**
     * This method take the event of action performed and change the thick in
     * the canvass
     * @param evt action event
     */
    private void SpinnerThickStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SpinnerThickStateChanged
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        /*if (currentWindow != null)
            currentWindow.getCanvass2D().setThick((int) SpinnerThick.getValue());*/
    }//GEN-LAST:event_SpinnerThickStateChanged
    
    /**
     * This method take the event of action performed and change the visibility
     * of it
     * @param evt action event
     */
    private void MenuItemFormBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFormBarActionPerformed
        // TODO add your handling code here:
        if (this.FormsBar.isVisible())
            this.FormsBar.setVisible(false);
        else
            this.FormsBar.setVisible(true);
    }//GEN-LAST:event_MenuItemFormBarActionPerformed
    
    /**
     * This method take the event of action performed and change the visibility
     * of it
     * @param evt action event
     */
    private void MenuItemAttributeBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAttributeBarActionPerformed
        // TODO add your handling code here:
        if (this.ShapesColorBar.isVisible())
            this.ShapesColorBar.setVisible(false);
        else
            this.ShapesColorBar.setVisible(true);
    }//GEN-LAST:event_MenuItemAttributeBarActionPerformed

    private void ComboBoxColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxColorActionPerformed
        // TODO add your handling code here:
        String color = (String) this.ComboBoxColor.getSelectedItem();
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            if ("Black".equals(color))
                currentWindow.getCanvass2D().setColor(Color.BLACK);
            else if ("White ".equals(color))
                currentWindow.getCanvass2D().setColor(Color.WHITE);
            else if ("Blue ".equals(color)) 
                currentWindow.getCanvass2D().setColor(Color.BLUE);
            else if ("Green ".equals(color))
                currentWindow.getCanvass2D().setColor(Color.GREEN);
            else if ("Yellow".equals(color))
                currentWindow.getCanvass2D().setColor(Color.YELLOW);
            else if ("Red ".equals(color))
                currentWindow.getCanvass2D().setColor(Color.RED);
        }
    }//GEN-LAST:event_ComboBoxColorActionPerformed

    private void MenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemNewActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow = new InternalWindow(this);
        Desktop.add(currentWindow);
        currentWindow.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics g = img.getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, 300, 300);
        currentWindow.getCanvass2D().setImg(img);
    }//GEN-LAST:event_MenuItemNewActionPerformed

    private void MenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if ( resp == JFileChooser.APPROVE_OPTION) {
            try {
                //TODO CODE
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                InternalWindow currentWindow = new InternalWindow(this);
                currentWindow.getCanvass2D().setImg(img);
                currentWindow.getCanvass2D().setOriginalImg(img);
                this.Desktop.add(currentWindow);
                currentWindow.setTitle(f.getName());
                currentWindow.setVisible(true);
            } catch (IOException ex) {
                System.err.println("Error reading the image");
            }
        }
    }//GEN-LAST:event_MenuItemOpenActionPerformed

    private void MenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow=(InternalWindow) Desktop.getSelectedFrame();   
        if (currentWindow != null) {     
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {     
                try {       
                    BufferedImage img = currentWindow.getCanvass2D().getImg(true);       
                    if (img != null) {         
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);         
                        currentWindow.setTitle(f.getName());       
                    }
                }catch (Exception ex) {       
                    System.err.println("Error saving the image");     
                }   
            }
        }
    }//GEN-LAST:event_MenuItemSaveActionPerformed
    
    private void updatePanelExtra(){
        this.changingBrightness = false;
        this.changingRotation = false;
        this.changingBinary = false;
        this.imgRight = null;
        this.imgLeft = null;
        this.SliderBrightness.setValue(0);
        this.SliderRotation.setValue(0);
        this.SliderBinary.setValue(50);
    }
    
    private void updatePanelExtra(int type){
        if (type != MainJFrame.C_BRIGHTNESS){
            this.changingBrightness = false;
            this.SliderBrightness.setValue(0);
        }
        if (type != MainJFrame.C_ROTATION){
            this.changingRotation = false;
            this.SliderRotation.setValue(0);
        }
        if (type != MainJFrame.C_BINARY){
            this.changingBinary = false;
            this.imgRight = null;
            this.imgLeft = null;
            this.SliderBinary.setValue(50);
        }
    }
    private void SliderBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBrightnessStateChanged
        // TODO add your handling code here:
        int brightValue = this.SliderBrightness.getValue();
        float bright = brightValue;
        InternalWindow currentWindow = (InternalWindow) Desktop.getSelectedFrame();
        if (currentWindow != null){
            if (!changingBrightness)
                currentWindow.getCanvass2D().setOriginalImg(currentWindow.getCanvass2D().getImg());
            currentWindow.getCanvass2D().changeBrightness(bright);
            this.updatePanelExtra(MainJFrame.C_BRIGHTNESS);
            this.changingBrightness = true;
        }
    }//GEN-LAST:event_SliderBrightnessStateChanged

    private void ComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxFilterActionPerformed
        // TODO add your handling code here:
        int filter = this.ComboBoxFilter.getSelectedIndex();
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().applyFilter(filter);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ComboBoxFilterActionPerformed

    private void ButtonNormalContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNormalContrastActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().applyContrast(LookupTableProducer.TYPE_SFUNCION);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonNormalContrastActionPerformed

    private void ButtonIluminationContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonIluminationContrastActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().applyContrast(LookupTableProducer.TYPE_ROOT);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonIluminationContrastActionPerformed

    private void ButtonDarkerContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDarkerContrastActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().applyContrast(LookupTableProducer.TYPE_POWER);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonDarkerContrastActionPerformed

    private void ButtonSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSinActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().applySinus();
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonSinActionPerformed

    private void Button90GActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button90GActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().rotate(90, true);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_Button90GActionPerformed

    private void Button180GActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button180GActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().rotate(180, true);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_Button180GActionPerformed

    private void Button270GActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button270GActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().rotate(270, true);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_Button270GActionPerformed

    private void SliderRotationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderRotationStateChanged
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            int degree = this.SliderRotation.getValue();
            if (!changingRotation)
                currentWindow.getCanvass2D().setOriginalImg(currentWindow.getCanvass2D().getImg());
            currentWindow.getCanvass2D().rotate(degree, false);
            this.updatePanelExtra(MainJFrame.C_ROTATION);
            this.changingRotation = true;
        }
    }//GEN-LAST:event_SliderRotationStateChanged

    private void ButtonAugmentateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAugmentateActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().scalate(1.25f);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonAugmentateActionPerformed

    private void ButtonReduceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonReduceActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().scalate(0.75f);
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonReduceActionPerformed

    private void ButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSepiaActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            currentWindow.getCanvass2D().sepia();
            this.updatePanelExtra();
        }
    }//GEN-LAST:event_ButtonSepiaActionPerformed

    private void ButtonGradientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGradientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonGradientActionPerformed

    /**
     * Makes the merge of two images
     * @param evt action event
     */
    private void SliderBinaryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBinaryStateChanged
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        BufferedImage imgdest;
        float alpha = ((float) this.SliderBinary.getValue())/100.0f;  
        if (currentWindow != null){
            //Dirty but I currently needed for a good functionality
            if(this.imgRight == null && this.imgLeft == null && alpha != .5){
                if (!changingBinary)        
                    currentWindow.getCanvass2D().setOriginalImg(currentWindow.getCanvass2D().getImg());
                InternalWindow previousWindow;
                previousWindow = (InternalWindow)Desktop.selectFrame(false);
                if (previousWindow != null){
                    this.imgRight = currentWindow.getCanvass2D().getImg();
                    this.imgLeft = previousWindow.getCanvass2D().getImg();
                    imgdest = ImageCanvass2D.addImage(this.imgRight, this.imgLeft, ImageCanvass2D.DYN_IMAGE, alpha);
                    InternalWindow newWindow = new InternalWindow();
                    newWindow.getCanvass2D().setImg(imgdest);
                    newWindow.getCanvass2D().setOriginalImg(imgdest);                    
                    newWindow.setVisible(true);
                    this.Desktop.add(newWindow);
                    newWindow.setTitle("BinaryDynamic");
                    try {
                        newWindow.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if (this.imgRight != null && this.imgLeft != null){
                imgdest = ImageCanvass2D.addImage(this.imgRight, this.imgLeft, ImageCanvass2D.DYN_IMAGE, alpha);
                currentWindow.getCanvass2D().setImg(imgdest);
                currentWindow.getCanvass2D().setOriginalImg(imgdest);
                currentWindow.getCanvass2D().repaint();
            }
            this.updatePanelExtra(MainJFrame.C_BINARY);
            this.changingBinary = true;
        }
       
    }//GEN-LAST:event_SliderBinaryStateChanged

    /**
     * Makes the binary plus operation
     * @param evt action event
     */
    private void ButtonPlusBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlusBinaryActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            InternalWindow previousWindow;
            previousWindow = (InternalWindow)Desktop.selectFrame(false);
            if (previousWindow != null){
                BufferedImage imgdest;
                imgdest = currentWindow.getCanvass2D().addImage(previousWindow.getCanvass2D().getImg(), ImageCanvass2D.ADD_IMAGE);
                currentWindow = new InternalWindow();
                currentWindow.getCanvass2D().setImg(imgdest);
                this.Desktop.add(currentWindow);
                currentWindow.setTitle("BinaryPlus");
                currentWindow.setVisible(true);
                this.updatePanelExtra();
            }
        }
    }//GEN-LAST:event_ButtonPlusBinaryActionPerformed

    /**
     * Makes the binary less operation
     * @param evt action event
     */
    private void ButtonLessBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLessBinaryActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null){
            InternalWindow previousWindow;
            previousWindow = (InternalWindow)Desktop.selectFrame(false);
            if (previousWindow != null){
                BufferedImage imgdest;
                imgdest = currentWindow.getCanvass2D().addImage(previousWindow.getCanvass2D().getImg(), ImageCanvass2D.SUBS_IMAGE);
                currentWindow = new InternalWindow();
                currentWindow.getCanvass2D().setImg(imgdest);
                this.Desktop.add(currentWindow);
                currentWindow.setTitle("BinaryLess");
                currentWindow.setVisible(true);
                this.updatePanelExtra();
            }
        }
    }//GEN-LAST:event_ButtonLessBinaryActionPerformed

    private void SliderThresholdingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderThresholdingStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_SliderThresholdingStateChanged

    private void ButtonArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonArcActionPerformed
        // TODO add your handling code here:
        InternalWindow currentWindow;
        currentWindow = (InternalWindow)Desktop.getSelectedFrame();
        if (currentWindow != null)
            currentWindow.getCanvass2D().setFigureMode(Canvass2D.M_ARC);
        changeTextStatus("Arc");
    }//GEN-LAST:event_ButtonArcActionPerformed

    private void ButtonColorBorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonColorBorderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonColorBorderActionPerformed

    private void SliderBrightness1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBrightness1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_SliderBrightness1StateChanged

//GEN-FIRST:event_ButtonSmoothActionPerformed
    private void ButtonSmoothActionPerformed(java.awt.event.ActionEvent evt){
        // TODO add your handling code here:
    }
//GEN-LAST:event_ButtonSmoothActionPerformed

    /**
     * Changes the text in the PixelTextStatus
     * @param p the point of the cursor
     * @param rgb the rgb value in the point cursor
     */
    public void setPixelStatus(Point p, int rgb){
        if (p == null)
            this.PixelValue.setText("");
        else
            this.PixelValue.setText("(" + p.getX() + "," + p.getY() + ")" + " RGB: [" + rgb + "]");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BarStatus;
    private javax.swing.JPanel BorderBar;
    private javax.swing.JPanel BotPanel;
    private javax.swing.JButton Button180G;
    private javax.swing.JButton Button270G;
    private javax.swing.JButton Button90G;
    private javax.swing.JToggleButton ButtonArc;
    private javax.swing.JButton ButtonAugmentate;
    private javax.swing.JButton ButtonColorBorder;
    private javax.swing.JButton ButtonDarkerContrast;
    private javax.swing.JToggleButton ButtonEdit;
    private javax.swing.JToggleButton ButtonEllipse;
    private javax.swing.JToggleButton ButtonFill;
    private javax.swing.JButton ButtonGradient;
    private javax.swing.ButtonGroup ButtonGroupForms;
    private javax.swing.JButton ButtonIluminationContrast;
    private javax.swing.JButton ButtonLessBinary;
    private javax.swing.JToggleButton ButtonLine;
    private javax.swing.JButton ButtonNew;
    private javax.swing.JButton ButtonNormalContrast;
    private javax.swing.JButton ButtonOpen;
    private javax.swing.JButton ButtonPlusBinary;
    private javax.swing.JToggleButton ButtonPoint;
    private javax.swing.JToggleButton ButtonRectangle;
    private javax.swing.JButton ButtonReduce;
    private javax.swing.JButton ButtonSave;
    private javax.swing.JButton ButtonSepia;
    private javax.swing.JButton ButtonSin;
    private javax.swing.JToggleButton ButtonSmooth;
    private javax.swing.JComboBox<String> ComboBoxBorderType;
    private javax.swing.JComboBox<String> ComboBoxColor;
    private javax.swing.JComboBox<String> ComboBoxFill;
    private javax.swing.JComboBox<String> ComboBoxFilter;
    private javax.swing.JDesktopPane Desktop;
    private javax.swing.JPanel ExtraPanel;
    private javax.swing.JPanel FormsBar;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JCheckBoxMenuItem MenuItemAttributeBar;
    private javax.swing.JCheckBoxMenuItem MenuItemFormBar;
    private javax.swing.JMenuItem MenuItemNew;
    private javax.swing.JMenuItem MenuItemOpen;
    private javax.swing.JMenuItem MenuItemSave;
    private javax.swing.JCheckBoxMenuItem MenuItemStatusBar;
    private javax.swing.JMenu MenuView;
    private javax.swing.JPanel PanelAntialiasingAndTransparency;
    private javax.swing.JPanel PanelBinary;
    private javax.swing.JPanel PanelBrightness;
    private javax.swing.JPanel PanelContrast;
    private javax.swing.JPanel PanelDraw;
    private javax.swing.JPanel PanelFillColorType;
    private javax.swing.JPanel PanelFilter;
    private javax.swing.JPanel PanelImage;
    private javax.swing.JPanel PanelRotation;
    private javax.swing.JPanel PanelScala;
    private javax.swing.JPanel PanelSin;
    private javax.swing.JPanel PanelStatus;
    private javax.swing.JPanel PanelThresholding;
    private javax.swing.JTextField PixelValue;
    private javax.swing.JPanel ShapesColorBar;
    private javax.swing.JSlider SliderBinary;
    private javax.swing.JSlider SliderBrightness;
    private javax.swing.JSlider SliderBrightness1;
    private javax.swing.JSlider SliderRotation;
    private javax.swing.JSlider SliderThresholding;
    private javax.swing.JSpinner SpinnerThick;
    private javax.swing.JPanel ThickColor;
    private javax.swing.JPanel ToolBar;
    private javax.swing.JPanel ToolsAndWindow;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
